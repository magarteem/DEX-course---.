//TODO: Напишите функцию счётчик вызовов, должна принимать название и функцию, а
//TODO: возвращать функцию
// Выводит в консоль, в момент вызова функции из параметров, кол-во вызовов
export const counter = (a, b) => {
  function cc() {
    return function () {
      let r = 1;
      return function (b) {
        console.log(++r);
      };
    };
  }
  let mm = cc();
  return mm(b);
};

//TODO: Напишите функцию логгер, должна принимать название и функцию, а возвращать
//TODO:  функцию
// Выводит в консоль, в момент вызова функции из параметров,
//её параметры результат и название
export const logger = (nameFu) => {
  function c() {
    return function (pamars1, pamars2) {
      console.log(`название: ${nameFu}`);
      console.log(`pamars1: ${pamars1}`);
      console.log(`pamars2: ${pamars2}`);
      console.log(`pamars1 + pamars2: ${pamars1 + pamars2}`);
    };
  }
  let m = c();
  return m;
};

//TODO: Напишите функцию каррирования, должна принимать функцию, а возвращать функцию
// Каррирование – это трансформация функций таким образом, чтобы они принимали
//аргументы не как f(a, b, c), а как f(a)(b)(c)
// Должна работать для любого кол-ва аргументов
export const curry = (f) => {
  //console.log(f);
  function funcСurryingCount(sum) {
    return function curried(...args) {
      return (...args2) =>
        function () {
          curried(...args, ...args2);
        };
    };
  }

  let funcCurrent = funcСurryingCount(f);
  return funcCurrent(1)(3)(4);
};

//=========================

//export const counter = (a, b) => {
//  //
//  function cc() {
//    return function () {
//      let r = 1;
//      let y = () => {
//        console.log("3333");
//      };
//      return function (b) {
//        console.log(++r);
//        y();
//        return b;
//      };
//    };
//  }
//  let mm = cc();
//  return mm(b);
//};

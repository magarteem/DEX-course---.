//TODO: Напишите функцию счётчик вызовов, должна принимать название и функцию, а
//TODO: возвращать функцию
// Выводит в консоль, в момент вызова функции из параметров, кол-во вызовов
export const counter = (a, b) => {
  function cc() {
    return function () {
      let r = 1;
      return function (b) {
        console.log(++r);
      };
    };
  }
  let mm = cc();
  return mm(b);
};

//TODO: Напишите функцию логгер, должна принимать название и функцию, а возвращать
//TODO:  функцию
// Выводит в консоль, в момент вызова функции из параметров,
//её параметры результат и название
export const logger = (nameFu) => {
  function c() {
    return function (pamars1, pamars2) {
      console.log(`название: ${nameFu}`);
      console.log(`pamars1: ${pamars1}`);
      console.log(`pamars2: ${pamars2}`);
      console.log(`pamars1 + pamars2: ${pamars1 + pamars2}`);
    };
  }
  let m = c();
  return m;
};

//TODO: Напишите функцию каррирования, должна принимать функцию, а возвращать функцию
// Каррирование – это трансформация функций таким образом, чтобы они принимали
//аргументы не как f(a, b, c), а как f(a)(b)(c)
// Должна работать для любого кол-ва аргументов

// эту пока не удалось решить
export const curry = (functions) => {
  return function fuArgs(...args) {
    if (args.length >= functions.length) {
      return functions.apply(this, args);
    } else {
      return function (...args2) {
        return fuArgs(...args, ...args2);
      };
    }
  };
};

//export const curry = (func) => {
//  return function fu(...args) {
//    console.log(args);
//    if (args.length >= func.length) {
//      console.log("----------");
//      console.log(args.length);
//      return func;
//    } else {
//      return (...args2) => {
//        return fu(...args, ...args2);
//      };
//    }
//  };
//};
